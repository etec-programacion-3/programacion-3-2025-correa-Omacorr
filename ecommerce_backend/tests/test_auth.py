# test_auth.py - Script para probar el sistema de autenticaci√≥n
import requests
import json
from datetime import datetime

BASE_URL = "http://localhost:8000/api/v1"

def test_auth_system():
    """Prueba completa del sistema de autenticaci√≥n"""
    
    print("üß™ PROBANDO SISTEMA DE AUTENTICACI√ìN")
    print("=" * 50)
    
    # Datos de prueba
    test_user = {
        "email": "juan.perez@ejemplo.com",
        "username": "juanperez",
        "password": "mipassword123",
        "nombre": "Juan",
        "apellido": "P√©rez",
        "telefono": "123456789",
        "direccion": "Calle Falsa 123"
    }
    
    # 1. Probar registro
    print("\n1Ô∏è‚É£ PROBANDO REGISTRO DE USUARIO")
    print("-" * 30)
    
    try:
        response = requests.post(f"{BASE_URL}/auth/register", json=test_user)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 201:
            data = response.json()
            print("‚úÖ Registro exitoso!")
            print(f"üîë Token: {data['access_token'][:50]}...")
            print(f"üë§ Usuario: {data['user']['username']}")
            token = data['access_token']
        else:
            print(f"‚ùå Error en registro: {response.json()}")
            # Si el usuario ya existe, intentamos hacer login directamente
            print("\n‚ö†Ô∏è  El usuario ya existe, continuando con login...")
            token = None
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return
    
    # 2. Probar login
    print("\n2Ô∏è‚É£ PROBANDO LOGIN")
    print("-" * 30)
    
    login_data = {
        "username": test_user["email"],  # OAuth2 usa username pero enviamos email
        "password": test_user["password"]
    }
    
    try:
        response = requests.post(f"{BASE_URL}/auth/login", data=login_data)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Login exitoso!")
            print(f"üîë Token: {data['access_token'][:50]}...")
            print(f"‚è±Ô∏è  Expira en: {data['expires_in']} segundos")
            token = data['access_token']
        else:
            print(f"‚ùå Error en login: {response.json()}")
            return
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return
    
    # 3. Probar acceso a perfil p√∫blico (sin autenticaci√≥n)
    print("\n3Ô∏è‚É£ PROBANDO PERFIL P√öBLICO (sin autenticaci√≥n)")
    print("-" * 30)
    
    try:
        response = requests.get(f"{BASE_URL}/users/{test_user['username']}")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Acceso a perfil p√∫blico exitoso!")
            print(f"üë§ Username: {data['username']}")
            print(f"üìõ Nombre: {data['nombre']} {data['apellido']}")
            print(f"üìÖ Registrado: {data['created_at']}")
            print(f"üîí Email NO visible (protegido)")
        else:
            print(f"‚ùå Error: {response.json()}")
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    # 4. Probar acceso a perfil completo (CON autenticaci√≥n)
    print("\n4Ô∏è‚É£ PROBANDO PERFIL COMPLETO (con autenticaci√≥n)")
    print("-" * 30)
    
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    try:
        response = requests.get(f"{BASE_URL}/users/me/profile", headers=headers)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Acceso a perfil completo exitoso!")
            print(f"üë§ Username: {data['username']}")
            print(f"üìß Email: {data['email']} (visible porque est√°s autenticado)")
            print(f"üì± Tel√©fono: {data['telefono']}")
            print(f"üè† Direcci√≥n: {data['direccion']}")
        else:
            print(f"‚ùå Error: {response.json()}")
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    # 5. Probar acceso sin token (debe fallar)
    print("\n5Ô∏è‚É£ PROBANDO ACCESO SIN TOKEN (debe fallar)")
    print("-" * 30)
    
    try:
        response = requests.get(f"{BASE_URL}/users/me/profile")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 403 or response.status_code == 401:
            print("‚úÖ Protecci√≥n funcionando correctamente!")
            print("‚ùå Acceso denegado sin token (comportamiento esperado)")
        else:
            print(f"‚ö†Ô∏è  Advertencia: deber√≠a retornar 401/403")
            print(f"Respuesta: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    # 6. Probar actualizaci√≥n de perfil
    print("\n6Ô∏è‚É£ PROBANDO ACTUALIZACI√ìN DE PERFIL")
    print("-" * 30)
    
    update_data = {
        "telefono": "987654321",
        "direccion": "Avenida Siempreviva 742"
    }
    
    try:
        response = requests.put(
            f"{BASE_URL}/users/me/profile", 
            json=update_data,
            headers=headers
        )
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Perfil actualizado exitosamente!")
            print(f"üì± Nuevo tel√©fono: {data['telefono']}")
            print(f"üè† Nueva direcci√≥n: {data['direccion']}")
        else:
            print(f"‚ùå Error: {response.json()}")
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    # 7. Probar token inv√°lido
    print("\n7Ô∏è‚É£ PROBANDO TOKEN INV√ÅLIDO (debe fallar)")
    print("-" * 30)
    
    invalid_headers = {
        "Authorization": "Bearer token_invalido_123"
    }
    
    try:
        response = requests.get(f"{BASE_URL}/users/me/profile", headers=invalid_headers)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 401:
            print("‚úÖ Validaci√≥n de token funcionando correctamente!")
            print("‚ùå Token inv√°lido rechazado (comportamiento esperado)")
        else:
            print(f"‚ö†Ô∏è  Advertencia: deber√≠a retornar 401")
            print(f"Respuesta: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    print("\n" + "=" * 50)
    print("üéâ PRUEBAS COMPLETADAS")
    print("=" * 50)
    print("\nüìä RESUMEN:")
    print("- Registro de usuario")
    print("- Login con credenciales")
    print("- Acceso a perfil p√∫blico (sin auth)")
    print("- Acceso a perfil completo (con auth)")
    print("- Protecci√≥n de rutas")
    print("- Actualizaci√≥n de perfil")
    print("- Validaci√≥n de tokens")
    print("\n‚úÖ Sistema de autenticaci√≥n funcionando correctamente!")

if __name__ == "__main__":
    print("\n" + "=" * 50)
    print("üîê TEST DE SISTEMA DE AUTENTICACI√ìN JWT")
    print("=" * 50)
    print("\n‚ö†Ô∏è  IMPORTANTE: Aseg√∫rate de que el servidor est√© corriendo")
    print("   Comando: uvicorn app.main:app --reload")
    print(f"   URL: {BASE_URL}")
    print("\n" + "=" * 50)
    
    input("\nPresiona Enter para comenzar las pruebas...")
    
    test_auth_system()